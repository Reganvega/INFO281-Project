library(wordcloud)
library(memoise)
runApp()
runApp()
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt.gz", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
library(tm)
library(wordcloud)
library(memoise)
documents <<- list("Employment gender paygap" = "paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand" = "stats")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt.gz", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
books <<- list("Employment gender paygap" = "paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand" = "stats")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt.gz", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
runApp()
library(tm)
library(wordcloud)
library(memoise)
books <<- list("Employment gender paygap" = "paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand" = "stats")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt.gz", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
library(tm)
library(wordcloud)
library(memoise)
books <<- list("Employment gender paygap" = "paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand" = "stats")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
books <<- list("Employment gender paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand")
y(tm)
librar
y(tm)
librar
library(tm)
library(wordcloud)
library(memoise)
books <<- list("Employment gender paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
View(books)
View(books)
books[[2]]
runApp()
#Begin to initiate data into tidyverse
Ethnic_Data <- read.csv("EthnicData.csv")
female_income<-read.csv("FemaleIncome.csv")
female_Regional<-read.csv("FemaleRegionalData.csv")
Total_Gender_Income<-read.csv("GenderIncomesTotal.csv")
male_income<-read.csv("MaleIncome.csv")
male_regional<-read.csv("MaleRegionalData.csv")
regional_income<-read.csv("RegionalIncome.csv")
#Clean unnecessary data from Ethnic Data
Ethnic_Data %>%
select(-Median.Weekly.Earnings, -Number.of.People, -Median.Hourly.Earnings) -> Ethnic_Data
#Begin to filter out unncessary data in the female income dataset
female_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,- Median.Hourly.Earnings) -> female_income
female_income <- gather(female_income, key ="Average Earnings", value = "Rate of Income", -Year)
#Filter out unnecessary columns in the female regional data
female_Regional %>%
select(-Median.hourly.earnings, -Number.of.people, -Medain.Weekly.earnings) -> female_Regional
female_Regional <- gather(female_Regional, key = "Measure", value = "Rate of Income", -Year, -Region)
#Cleaning the Male income data
male_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,-Median.Hourly.Earnings) -> male_income
male_income <- gather(male_income, key = "Measure Rate", value = "Rate of Income", -Year)
#Cleaning the Male Regional incomes data
male_regional %>%
select(-Median.hourly.earnings, -Medain.Weekly.earnings, -Number.of.people) -> male_regional
male_regional <- gather(male_regional, key = "Income Measure", value = "Rate of Income", -Region, -Year)
#Clean the Overall Regional income data of New Zealand
regional_income %>%
select(-Number.of.people, -Median.hourly.earnings, -Medain.Weekly.earnings) -> regional_income
regional_income <- gather(regional_income, key = "Income Measure", value = "Rate of Income" , -Year, -Region)
View(Ethnic_Data)
runApp()
runApp()
install.packages("DT")
install.packages("DT")
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('ui.R')
library(tm)
library(wordcloud)
library(memoise)
books <<- list("Employment gender paygap",
"Statistical analysis of Ethnic Wage gaps in New Zealand")
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
shiny::runApp()
Ethnic_Data <- read.csv("EthnicData.csv")
#Begin to initiate data into tidyverse
Ethnic_Data <- read.csv("EthnicData.csv")
female_income<-read.csv("FemaleIncome.csv")
female_Regional<-read.csv("FemaleRegionalData.csv")
Total_Gender_Income<-read.csv("GenderIncomesTotal.csv")
male_income<-read.csv("MaleIncome.csv")
male_regional<-read.csv("MaleRegionalData.csv")
regional_income<-read.csv("RegionalIncome.csv")
#Clean unnecessary data from Ethnic Data
Ethnic_Data %>%
select(-Median.Weekly.Earnings, -Number.of.People, -Median.Hourly.Earnings) -> Ethnic_Data
#Begin to filter out unncessary data in the female income dataset
female_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,- Median.Hourly.Earnings) -> female_income
female_income <- gather(female_income, key ="Average Earnings", value = "Rate of Income", -Year)
#Filter out unnecessary columns in the female regional data
female_Regional %>%
select(-Median.hourly.earnings, -Number.of.people, -Medain.Weekly.earnings) -> female_Regional
female_Regional <- gather(female_Regional, key = "Measure", value = "Rate of Income", -Year, -Region)
#Cleaning the Male income data
male_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,-Median.Hourly.Earnings) -> male_income
u
u
#load the R Libraries cores
#Check if libraries are installed, if not then install and load
if (!require(haven)){
install.packages("haven")
library(haven)
}
#Check if tidyverse is installed
if(!require(tidyverse)){
#Install tidyverse if it isn't available and load it after
install.packages("tidyverse")
library(tidyverse)
}
#Begin to initiate data into tidyverse
Ethnic_Data <- read.csv("EthnicData.csv")
female_income<-read.csv("FemaleIncome.csv")
female_Regional<-read.csv("FemaleRegionalData.csv")
Total_Gender_Income<-read.csv("GenderIncomesTotal.csv")
male_income<-read.csv("MaleIncome.csv")
male_regional<-read.csv("MaleRegionalData.csv")
regional_income<-read.csv("RegionalIncome.csv")
#Clean unnecessary data from Ethnic Data
Ethnic_Data %>%
select(-Median.Weekly.Earnings, -Number.of.People, -Median.Hourly.Earnings) -> Ethnic_Data
#Begin to filter out unncessary data in the female income dataset
female_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,- Median.Hourly.Earnings) -> female_income
female_income <- gather(female_income, key ="Average Earnings", value = "Rate of Income", -Year)
#Filter out unnecessary columns in the female regional data
female_Regional %>%
select(-Median.hourly.earnings, -Number.of.people, -Medain.Weekly.earnings) -> female_Regional
female_Regional <- gather(female_Regional, key = "Measure", value = "Rate of Income", -Year, -Region)
#Cleaning the Male income data
male_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,-Median.Hourly.Earnings) -> male_income
male_income <- gather(male_income, key = "Measure Rate", value = "Rate of Income", -Year)
#Cleaning the Male Regional incomes data
male_regional %>%
select(-Median.hourly.earnings, -Medain.Weekly.earnings, -Number.of.people) -> male_regional
male_regional <- gather(male_regional, key = "Income Measure", value = "Rate of Income", -Region, -Year)
#Clean the Overall Regional income data of New Zealand
regional_income %>%
select(-Number.of.people, -Median.hourly.earnings, -Medain.Weekly.earnings) -> regional_income
regional_income <- gather(regional_income, key = "Income Measure", value = "Rate of Income" , -Year, -Region)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
View(Ethnic_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("leaflet")
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(regional_income)
View(regional_income)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Begin to initiate data into tidyverse
Ethnic_Data <- read.csv("EthnicData.csv")
female_income<-read.csv("FemaleIncome.csv")
female_Regional<-read.csv("FemaleRegionalData.csv")
Total_Gender_Income<-read.csv("GenderIncomesTotal.csv")
male_income<-read.csv("MaleIncome.csv")
male_regional<-read.csv("MaleRegionalData.csv")
regional_income<-read.csv("RegionalIncome.csv")
#Clean unnecessary data from Ethnic Data
Ethnic_Data %>%
select(-Median.Weekly.Earnings, -Number.of.People, -Median.Hourly.Earnings) -> Ethnic_Data
#Begin to filter out unncessary data in the female income dataset
female_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,- Median.Hourly.Earnings) -> female_income
female_income <- gather(female_income, key ="Average Earnings", value = "Rate of Income", -Year)
#Filter out unnecessary columns in the female regional data
female_Regional %>%
select(-Median.hourly.earnings, -Number.of.people, -Medain.Weekly.earnings) -> female_Regional
female_Regional <- gather(female_Regional, key = "Measure", value = "Rate of Income", -Year, -Region)
#Cleaning the Male income data
male_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,-Median.Hourly.Earnings) -> male_income
male_income <- gather(male_income, key = "Measure Rate", value = "Rate of Income", -Year)
#Cleaning the Male Regional incomes data
male_regional %>%
select(-Median.hourly.earnings, -Medain.Weekly.earnings, -Number.of.people) -> male_regional
male_regional <- gather(male_regional, key = "Income Measure", value = "Rate of Income", -Region, -Year)
#Clean the Overall Regional income data of New Zealand
regional_income %>%
select(-Number.of.people, -Median.hourly.earnings, -Medain.Weekly.earnings) -> regional_income
regional_income <- gather(regional_income, key = "Income Measure", value = "Rate of Income" , -Year, -Region)
#All data should be cleaned and ready to be processed into ggplot
#All data should be cleaned and ready to be processed into ggplot
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(male_income)
View(male_income)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(female_Regional)
View(Ethnic_Data)
#load the R Libraries cores
#Check if libraries are installed, if not then install and load
if (!require(haven)){
install.packages("haven")
library(haven)
}
#Check if tidyverse is installed
if(!require(tidyverse)){
#Install tidyverse if it isn't available and load it after
install.packages("tidyverse")
library(tidyverse)
}
#Begin to initiate data into tidyverse
Ethnic_Data <- read.csv("EthnicData.csv")
female_income<-read.csv("FemaleIncome.csv")
female_Regional<-read.csv("FemaleRegionalData.csv")
Total_Gender_Income<-read.csv("GenderIncomesTotal.csv")
male_income<-read.csv("MaleIncome.csv")
male_regional<-read.csv("MaleRegionalData.csv")
regional_income<-read.csv("RegionalIncome.csv")
#Clean unnecessary data from Ethnic Data
Ethnic_Data %>%
select(-Median.Weekly.Earnings, -Number.of.People, -Median.Hourly.Earnings) -> Ethnic_Data
#Begin to filter out unncessary data in the female income dataset
female_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,- Median.Hourly.Earnings) -> female_income
female_income <- gather(female_income, key ="Average Earnings", value = "Rate of Income", -Year)
#Filter out unnecessary columns in the female regional data
female_Regional %>%
select(-Median.hourly.earnings, -Number.of.people, -Medain.Weekly.earnings) -> female_Regional
female_Regional <- gather(female_Regional, key = "Measure", value = "Rate of Income", -Year, -Region)
#Cleaning the Male income data
male_income %>%
select(-Number.of.People..000., -Median.Weekly.Earnings,-Median.Hourly.Earnings) -> male_income
male_income <- gather(male_income, key = "Measure Rate", value = "Rate of Income", -Year)
#Cleaning the Male Regional incomes data
male_regional %>%
select(-Median.hourly.earnings, -Medain.Weekly.earnings, -Number.of.people) -> male_regional
male_regional <- gather(male_regional, key = "Income Measure", value = "Rate of Income", -Region, -Year)
#Clean the Overall Regional income data of New Zealand
regional_income %>%
select(-Number.of.people, -Median.hourly.earnings, -Medain.Weekly.earnings) -> regional_income
regional_income <- gather(regional_income, key = "Income Measure", value = "Rate of Income" , -Year, -Region)
#All data should be cleaned and ready to be processed into ggplot
runApp()
shiny::runApp()
runApp('~/GitHub/INFO281-Project')
runApp()
runApp()
runApp('~/GitHub/INFO281-Project')
runApp('C:/Users/regan/OneDrive/University Materials/2019/Summer/INFO281/INFO281 Project')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Ethnic_Data)
View(Ethnic_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(male_income)
View(male_income)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
