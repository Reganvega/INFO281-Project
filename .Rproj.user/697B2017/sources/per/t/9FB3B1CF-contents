#Begin to load up the core processes for R to use and install in necessary.

library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)
library(dplyr)
library(readr)
library(tm)
library(wordcloud)
library(memoise)
library(DT)
library(leaflet)

Ethnic_Data <- read.csv("EthnicData.csv", stringsAsFactors = TRUE)
female_income <- read.csv("FemaleIncome.csv", stringsAsFactors = TRUE)
female_Regional <- read.csv("FemaleRegionalData.csv", stringsAsFactors = TRUE)
Total_Gender_Income <- read.csv("GenderIncomesTotal.csv", stringsAsFactors = TRUE)
male_income <- read.csv("MaleIncome.csv", stringsAsFactors = TRUE)
male_regional <- read.csv("MaleRegionalData.csv", stringsAsFactors = TRUE)
regional_income <- read.csv("RegionalIncome.csv", stringsAsFactors = TRUE)

# Define UI for application that draws a histogram
ui <- dashboardPage(
  skin = "green",
  dashboardHeader(title = "New Zealand Income Inequality Application"),
  
  dashboardSidebar(
    #-------------------------------------Shows the selectable tabs on the Sidebar Navigation---------------------------
    sidebarMenu(
      menuItem("Ethnic Income", tabName = "ethnic", icon = icon("bar-chart-o")),
      menuSubItem("Ethnic Raw Data", tabName = "rawethnic", icon = icon("globe")),
      menuSubItem("Gender Income", tabName = "gender", icon = icon("venus-mars")),
      menuItem("Regional Income", tabName = "regional", icon = icon("th")),
      menuItem("Word Cloud", tabName = "words", icon = icon('book'))
    )
  ),

  dashboardBody(
    tabItems(
#--------------------------------------------------Tab for the Ethnic data page--------------------------------------------------------
      tabItem(tabName = "ethnic",
              h2("Ethnic Income Visualisations"),
              fluidRow(
                sidebarPanel(width = 4,
                titlePanel("Filters"), 
                           selectInput("yearselect", "Year:", c("All", unique(as.character(Ethnic_Data$Year)))),
                           br(),
                           sliderInput("Year", "financial year", 1998,2019,1998)),
                
                #INFO BOX AT THE TOP FOR SUMMARISED STATS
                infoBoxOutput("HighestAverage"),
                infoBoxOutput("HighestPaidEthnic"),
                       
                
                       #display the bargraph
                       box(plotlyOutput("bargraph"))
                       ),
              
              ),
#------------------------------------------------------Gender income page tab-----------------------------------------------------------
        tabItem(tabName = "gender",
                h2("Gender Income section"),
                fluidRow(
                  sidebarPanel(width = 4, 
                               titlePanel("Filter"),
                               actionButton("male", "Male", icon = icon("mars")),
                               actionButton("female", "Female", icon = icon("venus")),
                               selectInput("year", "Year of Income", choices = c(male_income$Year)),
                               
                               ),
                  
                  box(infoBoxOutput("HighestMaleIncome"),
                      infoBoxOutput("HighestFemaleIncome")),
                  br(), hr(),
                  box(title = "Male Visualisation", plotlyOutput("maleincome")),
                  box(title = "Female Visualisation", plotlyOutput("femaleincome"))
                )),
      
#---------------------------------------------Tab for the sub category - raw input data---------------------------------------------------
      tabItem(tabName = "rawethnic",
              h2('Raw table Data for Ethnic Wage Data'),
             
              #create a new row in the UI for selected inputs
               fluidPage(
                 column(4,
                        selectInput("year",
                                    "Years:",
                                    c("All", unique(as.character(Ethnic_Data$Year))))
                        ),
                 column(4,
                        selectInput("ethnic",
                                    "Ethnicity:",
                                    c("All",
                                      unique(as.character(Ethnic_Data$Ethnicity))))
                        ),
                 
                 DT::dataTableOutput("table")
                   
                 ),
              
              box(title = "Legend",
                  p("Some random trext untill i am able to fdill this in"))
              
              ),
      
#-------------------------------------------Content body for Regional data visualisations----------------------------------------------------
      tabItem(tabName = "regional",
              h2("Regional Income Visualisation"),
              fluidRow(box(width = 4,
                           sliderInput("income_year", label = "Income Range",
                                       min = min(regional_income$Year),
                                       max = max(regional_income$Year),
                                       value = c(min(regional_income$Year, max(regional_income$Year)),
                                                 sep = "",
                                                 step = 1)
                           ))
                
              ),
              fluidRow(
                fluidRow(box(width = 14, leafletOutput(outputId = "nzmap"))),
                fluidRow(box(width = 14, dataTableOutput(outputId = "summary_table")))
              )
             ),
      
#--------------------------------------Content body or container for the world cloud visualisations.-------------------------------------
      tabItem(tabName = "words",
              h2("Word Cloud Visualisation"),
              box(titlePanel('Select report to analyse'),
                  selectInput("selection", "Select a book:",
                              choices = books),
                  actionButton("update", "change"),
                  hr(),
                  sliderInput("freq", "Minimum Frequency:",
                              min = 1, max = 50, value = 15),
                  
                  sliderInput("max", "Maximum number of words:",
                              min = 1, max = 200, value = 90)
                  ),
              
              #word cloud container
              box(plotOutput("wcplot"))
              )
    )
  )
)


#############################################################Server#######################################################################
# Define server logic required to draw a bargraph in plotly
server <- function(input, output) {
  
  yearm <- min(Ethnic_Data$Year)
  yearM <-max(Ethnic_Data$Year)
  
  output$bargraph <- renderPlotly({
    #data shown depending on the year selected
  
    p <- plot_ly(Ethnic_Data, x = Ethnic_Data$Ethnicity, type = 'histogram',
                 xyear = list(start = yearm, end = yearM))
    
    layout(p, xaxis = list(title = "Year", range = c(yearm, yearM)))
    
    })
  
  
  
  #output$bargraph <- renderPlotly({
   # plot_ly(data = Ethnic_Data, x = Ethnic_Data$Ethnicity, y = Ethnic_Data$Average.Weekly.Earnings)
  #})
  
  output$HighestAverage <- renderInfoBox({
    infoBox("Highest Average", max(Ethnic_Data$Average.Weekly.Earnings), icon = icon("money-bill-wave"))
  })
  
  output$HighestPaidEthnic <- renderInfoBox({
    infoBox("Highest Paid Ethnic", mode(Ethnic_Data$Ethnicity), icon = icon("globe"))
  })
 
  #for word clouds
  terms <- reactive({
    #change book and update the code to reflect the changes
    input$update
    #not for others though
    isolate({
      withProgress({
        setProgress(message = "Processing work corpus")
        getTermMatrix(input$selection)
      })
    })
  }) 
  
  #----------------------------------------------------------gender server stuff-----------------------------------------------
  output$HighestMaleIncome <- renderInfoBox({
    infoBox("Highest Average Male p/w", max(male_income$Average.Weekly.Earnings), icon = icon("money-bill-wave"))
  })
  
  output$HighestFemaleIncome <- renderInfoBox({
    infoBox("Highest Female Average P/W", max(female_income$Average.Weekly.Earnings), icon = icon("money-bill-wave"))
  })
  
  #---------------------------------------------------------Leaflet map creation code--------------------------------------
  
  data_input <- reactive({
    regional_income %>%
      filter(Year >= input$income_year[1]) %>%
      filter(Year <= input$income_year[2]) %>%
      group_by(Region)%>%
      summarise(`Rate of Income` = n())
  })
  
  #------------------------------------------------------Code for making the Word Cloud.------------------------------------
  wordcloud_rep <- repeatable(wordcloud)
  
  output$wcplot <- renderPlot({
    v <- terms()
    wordcloud_rep(names(v), v, scale=c(4,0.5),
                  min.freq = input$freq, max.words=input$max,
                  colors=brewer.pal(8,"Dark2"))
  })
  
  #Code for server for Raw Table data for tab - ethnic data
  output$table <- DT::renderDataTable(DT::datatable({
    data <- Ethnic_Data
    if (input$year != "All") {
      data <-data[data$Year == input$year,]
    }
    
    if (input$ethnic != "All") {
      data <- data[data$Ethnicity == input$ethnic,]
    }
    data
  }))

  
  
}

# Run the application 
shinyApp(ui = ui, server = server)
